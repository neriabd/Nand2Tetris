// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int segmentSize;
        var int block;
        var int sizeLeft;
        var int next;
        var int prev;
        var Array tempList;

        let segmentSize = size + 1;
        let tempList = freeList;
        while (~(tempList[1] = 0) | (~(tempList[0] < segmentSize))){
            let sizeLeft = tempList[0] - segmentSize;
            if(sizeLeft = 0 | sizeLeft = 1){
                if (tempList = freeList){
                    let freeList = freeList[1];
                }
                else{
                    let prev[1] = tempList[1];
                }
                let block = tempList;
                let block[0] = segmentSize;
                return block + 1;
            }
            if (sizeLeft > 0){
                let tempList[0] = sizeLeft;
                let block = tempList + sizeLeft;
                let block[0] = segmentSize;
                return block + 1;
            }
            let prev = tempList;
            let next = tempList[1];
            let tempList = next;
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        if (o = - 1){
            return;
        }
        let o[0] = freeList;
        let freeList = o - 1;
        return;
    }

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int i;
        var int maxVal;
        var int size;
        var Array block;

        let i = 0;
        let maxVal = o[0];
        let block = o - 1;
        let size = block[0] - 1;
        while (i < size){
            if (o[i] > maxVal){
                let maxVal = o[i];
            }
            let i = i + 1;
            
        }
        return maxVal;
    }
}
