// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int divideTemp;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384 + 16384;
      return;
    }

    function boolean bit(int x, int i) {
		  return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x > 0){
        return x;
      }
      return -x;
    }

    function boolean isPositive(int x, int y){
      if(((x < 0) & (y < 0)) | ((x > 0) & (y > 0))){
        return true;
      }
      return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var boolean pos;
      var int sum;
      var int i;
      var int shiftedX;
      let pos = Math.isPositive(x, y);      
      let x = Math.abs(x);
      let y = Math.abs(y);
      let sum = 0;
      let shiftedX = x;
      let i = 0;
      while(i < 16){
        if(Math.bit(y, i) = true){
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }
      if(pos){
        return sum;
      }
      return -sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		// This should be implemented without using multiplication.
    // Hint: updating the value of 2*q*y in the "if" statement requires
    // at most a single addition operator at every recursion step.
    // Pseudocode:
    // 1. if (y > x) return 0
    // 2. let q = divide(x, 2*y)
    // 3. if ((x - 2*q*y) < y)
    // 4.   return 2*q
    // 5. else
    // 6.   return 2*q + 1

      var boolean pos;
      var int sum;
      var int q;

      let pos = Math.isPositive(x, y);
      let divideTemp = 0;
      let x = Math.abs(x);
      let y = Math.abs(y);

      let sum = Math.divideHelper(x, y);

      if (pos){
        return sum;
      }
      return -sum;
    }

    function int divideHelper(int x, int y){
      var int q;

      if (y > x | y < 0){
        return 0;
      }
      let q = Math.divideHelper(x, y + y);
      if ((x - divideTemp) < y){
        return q + q;
      }
      let divideTemp = divideTemp + y;
      return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using multiplication or division.
    // Pseudocode (where '**' is the mathematical power function):
    // 1. let y = 0
    // 2. for j = (n/2 - 1) ... 0 do
    // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
    // 4. return y

      var int ySquared;
      var int yTimesPowerJ;
      var int y;
      var int j;
      var int res;

      let res = 0;
      let ySquared = 0;
      let yTimesPowerJ = 0;
      let y = 0;
      let j = 7;
      while(~(j < 0)){
        let res = ySquared + yTimesPowerJ + twoToThe[j + j];
        if ((~(res > x)) & (res > 0)){
          let y = y + twoToThe[j];
          let yTimesPowerJ = (#yTimesPowerJ) + twoToThe[j + j];
          let ySquared = res;
        }
        else{
          let yTimesPowerJ = #yTimesPowerJ;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b){
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b){
        return a;
      }
      return b;
    }
}
